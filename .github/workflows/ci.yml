name: Continuous Integration
env:
  GITHUB_ACCESS_TOKEN: ${{ secrets.SHARED_PACKAGES_READ }}
  AWS_DEFAULT_REGION: us-east-1
  AWS_ECR: foobar.amazonaws.com
  DISABLE_DB_SYNCHRONIZE: true
  SERVICE_NAME: YOUR_REPO_NAME
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECR__WRITE_ONLY_ACCESS_KEY_ID__RAW }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR__WRITE_ONLY_SECRET_ACCESS_KEY__RAW }}
  LATEST_TAG: latest
  BUNDLE_GEMS__CONTRIBSYS__COM: ${{ secrets.BUNDLE_GEMS__CONTRIBSYS__COM }}
  BUNDLE_RUBYGEMS__PKG__GITHUB__COM: _:${{secrets.SHARED_PACKAGES_READ}}

on: [push]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
permissions:
  id-token: write
  contents: read

jobs:
  debug:
    name: Debug Contexts
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'
      - name: Dump inputs/workflow call context
        run: echo '${{ toJSON(inputs) }}'

  # ===== Testing =====
  install:
    runs-on: ubuntu-latest
    name: Install
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
      - name: Set Tag
        run: echo TAG="$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
      - name: Use Ruby Action
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Install dependencies
        run: bundle install

  lint:
    runs-on: ubuntu-latest
    name: Lint
    needs:
      - install
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
      - name: Use Ruby Action
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Run Linter
        run: bundle exec rubocop --parallel --format github

  audit:
    runs-on: ubuntu-latest
    name: Audit
    needs:
      - install
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
      - name: Use Ruby Action
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Run Audit
        run: bundle exec bundle audit check --update

  brakeman:
    runs-on: ubuntu-latest
    name: Brakeman Vulnerability Static Analysis
    needs:
      - install
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
      - name: Use Ruby Action
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Run Brakeman
        run: bundle exec brakeman

  tests:
    name: Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: YOUR_REPO_NAME_dev
          POSTGRES_PASSWORD: YOUR_REPO_NAME_password
          POSTGRES_DB: YOUR_REPO_NAME_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    needs:
      - install
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
      - name: Use Ruby Action
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Rspec
        run: bundle exec rspec
      - name: Store coverage report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage.json
          path: ./coverage/coverage.json

  static_code_analysis:
    uses: hinge-health/gha-static-code-analysis/.github/workflows/static-code-analysis.yml@v2
    with:
      coverage_artifact: coverage.json
    secrets: inherit
    if: always()
    needs:
      - tests

  docker-build:
     name: Docker Build and Push
     runs-on: ubuntu-latest
     needs:
      - 'lint'
      - 'brakeman'
      - 'audit'
      - 'tests'
     steps:
       - name: Git Checkout
         uses: actions/checkout@v2
       - name: Configure AWS Credentials
         id: aws
         uses: aws-actions/configure-aws-credentials@v1
         with:
           role-to-assume: foobar
           role-session-name: YOUR_REPO_NAME
           aws-region: us-west-2
       - name: Docker Build and Push
         run: make docker-build-and-push
